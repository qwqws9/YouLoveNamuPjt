<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				 http://www.springframework.org/schema/beans/spring-beans.xsd
				 http://www.springframework.org/schema/aop 
				 http://www.springframework.org/schema/aop/spring-aop.xsd">
				
		<!--  AOP 적용 : LOG 를 처리사느  Aspect 선언   -->
	<!-- 1.일반 Bean Definition :: POJO 기반 -->
	<bean id="logAspect" class="com.youlove.common.aspect.LogAspectJ" />
	 
	 <!-- 2. 선언적으로 Point cut / Advice 정의 
	 			:: TestAspectJ02.java(pointCut+advice 합치기(?)) 의 annotation과 아래를 비교 -->
	 <aop:config>
	 	<aop:aspect  ref="logAspect">
	 		<aop:around pointcut="execution(* com.youlove.service..*Impl.*(..) )"	method="invoke"/>
	 	</aop:aspect>
	 </aop:config>
	
	<!-- 
	 execution(* : 포인트컷 표현식
	 포인트컷 표현식
	 1. execution(지정자)
	 2. (* com.youlove.service..*Impl.*(..)) 타겟명세
	 
	 ex)
	 pointcut="execution(* com.youlove.service..*Impl.*(..) )"	method="invoke"
	 
	 execution : 포인트컷 지정자
	 * : 리턴 타입을 나타냄 (현재(*): 모든 타입 리턴 가능 )
	 com.youlove.service..*Impl.* : 타겟이 되는 메소드 지정 현재 Impl이 붙는 모든 메소드 지정 
	 (..) : 인자(argument)타입  현재: 모든 타입 인자 허용.
	  -->
	
</beans>



<!-- 
@Before (이전)
어드바이스 타겟 메소드가 호출되기 전에 어드바이스 기능을 수행
@After (이후)
타겟 메소드의 결과에 관계없이(즉 성공, 예외 관계없이) 타겟 메소드가 완료 되면 어드바이스 기능을 수행
@AfterReturning (정상적 반환 이후)
타겟 메소드가 성공적으로 결과값을 반환 후에 어드바이스 기능을 수행
@AfterThrowing (예외 발생 이후)
타겟 메소드가 수행 중 예외를 던지게 되면 어드바이스 기능을 수행
@Around (메소드 실행 전후)
어드바이스가 타겟 메소드를 감싸서 타겟 메소드 호출전과 후에 어드바이스 기능을 수행
-->

 
 
<!--

1) 관점(Aspect)지향 프로그래밍

구현하고자 하는 횡단 관심사의 기능을 의미한다. 한개 이상의 포인트컷과 어드바이스의 조합으로 만들어진다.


////////////////////////////
2) 조인포인트(Join point)

관점(Aspect)를 삽입하여 어드바이스가 적용될 수 있는 위치를 말한다. 


////////////////////////////
3) 어드바이스(Advice)

관점(Aspect)의 구현체로 조인 포인트에 삽입되어 동작하는 코드이다. 

어드바이스는 조인포인트와 결합하여 동작하는 시점에 따라 5개로 구분된다.

Before Advice : 조인포인트 전에 실행되는 advice
After returning advice : 조인포인트에서 성공적으로 리턴 된 후 실행되는 advice
After throwing advice : 예외가 발생하였을 경우 실행되는 advice
After advice : 조인포인트에서 메서드의 실행결과에 상관없이 무조건 실행되는 advice, 자바의 finally와 비슷한 역할을 한다.
Around advice : 조인포인트의 전 과정(전, 후)에 수행되는 advice

///////////////////////////////
4) 포인트컷(PointCut)

어드바이스를 적용할 조인 포인트를 선별하는 과정이나 그 기능을 정의한 모듈을 의미한다. 패턴매칭을 이용하여 어떤 조인포인트를 사용할 것인지 결정한다.


///////////////////////////////

5) 타겟(Target)

어드바이스를 받을 대상, 즉 객체를 의미한다. 비지니스로직을 수행하는 클래스일수도 있지만, 프록시 객체(Object)가 될 수도 있다.
///////////////////////////////

6) 프록시 (Proxy) 
타겟을 감싸서 타겟의 요청을 대신 받아주는 랩핑(Wrapping) 오브젝트입니다. 
호출자 (클라이언트)에서 타겟을 호출하게 되면 타겟이 아닌 타겟을 감싸고 있는 프록시가 호출되어, 타겟 메소드 실행전에 선처리, 타겟 메소드 실행 후, 후처리를 실행시키도록 구성되어있습니다. 
///////////////////////////////

7) 인트로덕션 (Introduction) 
타겟 클래스에 코드 변경없이 신규 메소드나 멤버변수를 추가하는 기능을 얘기합니다. 

///////////////////////////////
8) 위빙 (Weaving) 
지정된 객체에 애스팩트를 적용해서 새로운 프록시 객체를 생성하는 과정을 얘기합니다. 
예를 들면 A라는 객체에 트랜잭션 애스팩트가 지정되어 있다면, A라는 객체가 실행되기전 커넥션을 오픈하고 실행이 끝나면 커넥션을 종료하는 기능이 추가된 프록시 객체가 생성되고, 이 프록시 객체가 앞으로 A 객체가 호출되는 시점에서 사용됩니다. 이때의 프록시객체가 생성되는 과정을 위빙이라 생각하시면 됩니다. 
컴파일 타임, 클래스로드 타임, 런타임과 같은 시점에서 실행되지만, Spring AOP는 런타임에서 프록시 객체가 생성 됩니다. 

-->

